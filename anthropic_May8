from flask import Flask, request, render_template, session, redirect, url_for
from flask_session import Session
import os
import anthropic
import pandas as pd

app = Flask(__name__)
app.config["SECRET_KEY"] = "test"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Use your actual Anthropic API key here
client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="enter API Key here",
)

def read_excel_data(file_path):
    return pd.read_excel(file_path)

def generate_prompt(excel_data, chat_history):
    prompt = "Your answers from the excel file should be numerically accurate. For example if the query says less than 3, the answer is 0, 1, and 2 but doesn't give me 3. Additionally, if there are multiple options, write how many options there are and list its attributes\n"

    # Include the Excel data at the beginning of the session or when needed
    for index, row in excel_data.iterrows():
        for col_name, col_value in row.items():
            prompt += f"{col_name}: {col_value}\n"
    prompt += "\n"  # Ensure there is a separation between the Excel data and chat history

    # Add previous conversation history to maintain context, adding a newline after each message
    for role, message in chat_history:
        prompt += f"{role}: {message}\n\n"
    return prompt

def chat_with_rag(user_input):
    excel_data = session.get('excel_data', None)
    chat_history = session.get('chat_history', [])

    chat_history.append(("User", user_input))  # Add user input to history

    # Calculate the total number of tokens in the chat history
    total_tokens = sum(len(f"{role}: {message}") for role, message in chat_history)
    if total_tokens > 16385:  # Example threshold, adjust based on your model's limits
        chat_history = []  # Reset the chat history if token count is too high

    prompt = generate_prompt(excel_data, chat_history)
    response = client.messages.create(
        model="claude-3-opus-20240229",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=1000
    )
    response_text = response.content[0].text  # Access the content directly
    chat_history.append(("Akai", response_text))  # Add bot response to history

    session['chat_history'] = chat_history  # Update session

    return response_text


@app.route("/clear_session", methods=["GET"])
def clear_session():
    session.clear()  # Clears the session data
    return redirect(url_for('home'))  # Redirects to the home page

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        user_input = request.form["user_input"]
        if 'excel_data' not in session:
            # Load Excel data only once per session
            session['excel_data'] = read_excel_data('')
        response = chat_with_rag(user_input)
        return render_template("index4.html", chat_history=session['chat_history'])
    return render_template("index4.html", chat_history=[])

if __name__ == "__main__":
    app.run(debug=True)
